#!/usr/bin/perl
 use strict;
 use warnings;
 my $i = -1;
 my $j = 0;
 
 my %hash = (("+",1),("-",1),("*",2),("/",2),("^",3));
 my $elem;
 $_ = <STDIN>;
 chomp($_);
 
 my @arbeg = split(//,$_);
 
 while($i != -2){#выкидываем из массива пробельные элементы
    $i=-1;
	$j=0;
   while($i == -1 and $j<=$#arbeg){
    if($arbeg[$j] eq ' '){$i = $j}; 
	$j++
   };	
   if($i != -1){splice(@arbeg,$i,1)}else{$i=-2}
 };
   
 $i=0;  
 my $pred=$arbeg[0];
 for($i=1;$i<=$#arbeg;$i++){#переобозначаем '(-' на '(0-'
    if(($arbeg[$i] eq '-') and ($pred eq '(')){
	   splice(@arbeg,$i,1,0,'-')
	};	
    $pred=$arbeg[$i];
 };

 $i=0;
 $pred=$arbeg[0];
 for($i=1;$i<=$#arbeg;$i++){#переобозначаем унарный минус на "_"
    if(($arbeg[$i] eq '-') and (($pred eq '+') or ($pred eq '(')or ($pred eq '-') or ($pred eq '/')or ($pred eq '^') or ($pred eq '*'))){
	   splice(@arbeg,$i,1,'_');
	};	
    $pred=$arbeg[$i];
 };
	
	
 $i=0;
 $pred=$arbeg[0];
 $i=1;
 my @arend;
 my @arsign;
 while($i<=$#arbeg){#цифры собираем в число
    if((not exists $hash{$arbeg[$i]}) and (not exists $hash{$pred}) and ($pred ne '_') and ($pred ne '(') and ($arbeg[$i] ne ')')){
	   $arbeg[$i-1]=$arbeg[$i-1]*10+$arbeg[$i];
	   splice(@arbeg,$i,1);
	   $i=$i-1;
	}
    $pred=$arbeg[$i];
	$i=$i+1;
 }	
 
 if($arbeg[0] eq '-'){unshift(@arbeg,0)};

 $i=2;
 my $pred0=$arbeg[0];
 my $pred1=$arbeg[1];
 while($i<=$#arbeg){# "унарный минус" + "число" преобразуем в "число * (-1)"
    if((not exists $hash{$arbeg[$i]}) and ($arbeg[$i] ne '(')  and ($pred1 eq '_') and (exists $hash{$pred0}) ){
	   $arbeg[$i-1]=$arbeg[$i]*(-1);
	   splice(@arbeg,$i,1);
	   $i=$i-1;
	}
    $pred0=$arbeg[$i-1];
	$pred1=$arbeg[$i];
	$i=$i+1;
 }
 print "\n", 'Enitial expression: ';
 foreach  $elem (@arbeg) {  
  print $elem,' ';  
  };

my $k;
 while($#arbeg>=0){#создание польской обратной записи в @arend
    $k = shift(@arbeg);
    if (not exists $hash{$k}){
	  if ($k eq '('){
	    push(@arsign,$k)
	  }else {
	    if ($k eq ')'){
	      $j = pop(@arsign); 
	      while ($j ne '('){
		    push(@arend,$j);
		    $j = pop(@arsign);
		  };
	    }else {push(@arend,$k)} 
	   }
	  
	}else{
	  if($#arsign >= 0){
	   $j = pop(@arsign);
	   if($j ne '('){
	    if ($hash{$k} > $hash{$j}){push(@arsign,$j,$k);
	    }else{
	       my $bol = 0;
	       while($hash{$k} <= $hash{$j} and $bol == 0){
		    push(@arend,$j);
		    if ($#arsign >=0){
		      $j = pop(@arsign)
		    }else {$bol=1}
			
		   }
		   if($bol==0){ push(@arsign,$j,$k);}
		   else{push(@arsign,$k)}
	    }
       }else{push(@arsign,$j,$k)}		
	  }else{push(@arsign,$k)}
	    
	
    }
 };
 
 while ($#arsign>=0){
	$j = pop(@arsign);
	push(@arend,$j);
}
	
 
 print "\n",'Reverse polish notation: ' ;
 
 foreach  $elem (@arend) {  
  print $elem,' ';  
  };
  
 my @stek;
 my $st1;
 my $st2;
 while ($#arend>=0) {#считаем выражение
    $k = shift(@arend);
	if (not exists $hash{$k}){
	  push(@stek,$k);
	}else {
	  $st2=pop(@stek);
	  $st1=pop(@stek);
	  if($st1 eq '_'){
	  $st2=$st2*(-1);
	  $st1=pop(@stek);
	  }
	  if($k eq '+'){push(@stek,$st1+$st2)};
	  if($k eq '-'){push(@stek,$st1-$st2)};
	  if($k eq '*'){push(@stek,$st1*$st2)};
	  if($k eq '^'){push(@stek,$st1**$st2)};
	  if($k eq '/'){push(@stek,$st1/$st2)}
	}
}	
  
  print "\n",'Result: ';
 
  print @stek;
 
